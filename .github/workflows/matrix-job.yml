name: matrix
on:
  push:
    branches:
      - '**'
  pull_request:
  workflow_dispatch:

defaults:
  run:
    shell: 'bash -Eeuo pipefail -x {0}'

jobs:
  generate-unit-tests-jobs:
    name: Generate jobs for unit tests
    runs-on: ubuntu-20.04
    outputs:
      k8sMatrix: ${{steps.get-k8s-versions.outputs.k8s_versions}}
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v3.1.0
      -
        id: get-k8s-versions
        name: Get k8s versions for unit test
        shell: bash
        run: |
          version=$(cat .github/k8s_version.json | jq -c)
          echo $version
          echo "::set-output name=k8s_versions::${version}"
          # echo "k8s=${version}" >> $GITHUB_ENV

  generate-unit-tests-jobs-test:
    name:  unit tests
    needs:
      - generate-unit-tests-jobs
    runs-on: ubuntu-20.04
    steps:
      -
        id: get-k8s-versions
        name: Get k8s versions for unit test
        shell: bash
        run: |
          echo "start"
          echo  "${{ needs.generate-unit-tests-jobs.outputs.k8sMatrix }}"

  tests:
    name: Run unit tests
    needs:
      - generate-unit-tests-jobs
    runs-on: ubuntu-20.04
    strategy:
      matrix: ${{ fromJSON(needs.generate-unit-tests-jobs.outputs.k8sMatrix) }}
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v3.1.0
      -
        name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      -
        name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      -
        name: Run unit tests
        env:
          ENVTEST_K8S_VERSION: ${{ matrix.k8s-version }}
        run: |
          echo ${{ matrix.k8s-version }}