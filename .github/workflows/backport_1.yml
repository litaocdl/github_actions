name: pull_request_backport
on:
  pull_request_target:
    types:
      - closed
      - opened
      - reopened
    branches:
      - main

jobs:
  # Label the source pull request with 'backport-requested' and all supported releases label, the goal is, by default
  # we backport everything
  label-source-pr:
    name: label the source pr
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-20.04
    steps:
      -
        name: label the pull request
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          number:  ${{ github.event.pull_request.number }}
          labels: |
            backport-requested :arrow_backward:
            release-1.16
            release-1.17
            release-1.18
      -
        name: Create comment
        uses: peter-evans/create-or-update-comment@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            By default, the pull request is supposed to backport to all release branches.
            To stop backport this pr to all release branches, remove the backport-requested :arrow_backward: label.
            To stop backport this pr to certain release branch(es), remove the specific release-xxx label.
          reactions: heart

  ## backport pull request in condition when pr contains 'backport-requested' label and contains target branches labels
  back-porting-pr:
    name: backport to release branches
    if: | 
       github.event.pull_request.merged == true && 
       ( 
         contains(github.event.pull_request.labels.*.name, 'backport-requested') ||
         contains(github.event.pull_request.labels.*.name, 'backport-requested :arrow_backward:') 
       )
       
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        branch:
          -  release-1.16
          -  release-1.17
          -  release-1.18
    env:
      PR: ${{ github.event.pull_request.number }}
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ matrix.branch }}
          token: ${{ secrets.TAO_PTO }}
      -
        name: Check commits
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          label=$(gh pr view ${PR} --json labels -q ".labels.[].name" 2>/dev/null | grep ${{ matrix.branch }} || :)
          if [ -z "${label}" ]
          then
            echo "No ${{ matrix.branch }} label found!"
            exit 0
          fi
          echo "LABEL=${label}" >> $GITHUB_ENV
          echo "find label ${label} in pull request ${PR}"
          commit=$(gh pr view ${PR} --json mergeCommit -q ".mergeCommit.oid" 2>/dev/null || :)
          if [ -z "${commit}" ]
          then
            echo "No commit found!"
            exit 0
          fi
          echo "COMMIT=${commit}" >> $GITHUB_ENV
          echo "cherry-pick commit ${commit} to branch ${{ matrix.branch }}"
          author_name=$(git show -s --format='%an' "${commit}")
          echo "AUTHOR_NAME=${author_name}" >> $GITHUB_ENV
          author_email=$(git show -s --format='%ae' "${commit}")
          echo "AUTHOR_EMAIL=${author_email}" >> $GITHUB_ENV
      -
        name: cherry pick
        id: cherry_pick
        if: |
          env.LABEL != '' &&
          env.COMMIT != '' &&
          env.LABEL == matrix.branch
        run: |
          git config user.email "${{ env.AUTHOR_EMAIL }}"
          git config user.name "${{ env.AUTHOR_NAME }}"
          git fetch
          git cherry-pick -x --allow-empty-message --mainline 1 ${{ env.COMMIT }}
          git push
         

  create-tickets:
    name: create tickets for failed cherry-pick
    needs:
      - back-porting-pr
    if: | 
      failure()
    env:
      PR: ${{ github.event.pull_request.number }}
    runs-on: ubuntu-20.04
    steps:
    -
      name: prepare ticket content
      run:
          label=$(gh pr view ${PR} --json labels -q ".labels.[].name" 2>/dev/null | grep "release-" || :)
          echo "labels=${label}" >> $GITHUB_ENV
    -
      name: create ticket
      uses: dacbd/create-issue-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        title: Backport failure for pull request ${{ env.PR }}
        labels: backport failure
        body: |
          ### Context
          Automatically backport failure

          Pull request: ${{ github.server_url }}/${{ github.repository }}/pull/${{ env.PR }}
          Commit: ${{ github.server_url }}/${{ github.repository }}/commit/${{ env.COMMIT }}
          Cherry-pick workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          Target branch: ${{ env.labels }}



